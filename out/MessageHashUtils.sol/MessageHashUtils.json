{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bc389fc0a5912ac3a8fb0f93f5050ad8aad07251e9365f699e4ee593a3ad1dca64736f6c63430008190033","sourceMap":"521:3235:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;521:3235:15;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bc389fc0a5912ac3a8fb0f93f5050ad8aad07251e9365f699e4ee593a3ad1dca64736f6c63430008190033","sourceMap":"521:3235:15:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solady/=lib/solady/src/\",\":solmate/=lib/solmate/src/\",\":splits-contracts-monorepo/=lib/splits-contracts-monorepo/src/\",\":splits-contracts/=lib/splits-contracts/contracts/\",\":splits-v2/=lib/splits-contracts-monorepo/packages/splits-v2/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0x29074fe5a74bb024c57b3570abf6c74d8bceed3438694d470fd0166a3ecd196a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4f8435ccbc56e384f4cc9ac9ff491cf30a82f2beac00e33ccc2cf8af3f77cc3\",\"dweb:/ipfs/QmUKJXxTe6nn1qfgnX8xbnboNNAPUuEmJyGqMZCKNiFBgn\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x3f1998a2904792ff2a576827876638b4917573186537f878d30b23277a3b8d38\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a8dfb08ed617c9d874de901e44ac8af7af7b13e7c84000a1da3cdaf6004593e8\",\"dweb:/ipfs/QmPX2hZAvCZJCQNSXcWqhxh3xp6UitwESrw3K2u3aYNqiu\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x6fe40ce2addf1fe91a86c334b51ef5abe9c3b831d5d4d74ecae1d9c7d06cdccb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5027588e408027935ac78e32d9e813fda6bf33349b8a5be5c6c936273743369f\",\"dweb:/ipfs/QmZwSzs94V9u7VSdhw2bhbrogWZ37wvrQFBz6QNJTmKokE\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047\",\"dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x519e2c9d9c4dfd63311fb98663e55ba465772897cd4a98e3a5406a1f5959811f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c4718d121f448f8fce3b28a276fd194014597319a4133696793893ae13c6e512\",\"dweb:/ipfs/QmaQyHiKokgyWq9nREub6xGUAEYiGTiv4caigjGCiWZTjZ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solady/=lib/solady/src/","solmate/=lib/solmate/src/","splits-contracts-monorepo/=lib/splits-contracts-monorepo/src/","splits-contracts/=lib/splits-contracts/contracts/","splits-v2/=lib/splits-contracts-monorepo/packages/splits-v2/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":"MessageHashUtils"},"evmVersion":"paris","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x29074fe5a74bb024c57b3570abf6c74d8bceed3438694d470fd0166a3ecd196a","urls":["bzz-raw://f4f8435ccbc56e384f4cc9ac9ff491cf30a82f2beac00e33ccc2cf8af3f77cc3","dweb:/ipfs/QmUKJXxTe6nn1qfgnX8xbnboNNAPUuEmJyGqMZCKNiFBgn"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792","urls":["bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453","dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x3f1998a2904792ff2a576827876638b4917573186537f878d30b23277a3b8d38","urls":["bzz-raw://a8dfb08ed617c9d874de901e44ac8af7af7b13e7c84000a1da3cdaf6004593e8","dweb:/ipfs/QmPX2hZAvCZJCQNSXcWqhxh3xp6UitwESrw3K2u3aYNqiu"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0x6fe40ce2addf1fe91a86c334b51ef5abe9c3b831d5d4d74ecae1d9c7d06cdccb","urls":["bzz-raw://5027588e408027935ac78e32d9e813fda6bf33349b8a5be5c6c936273743369f","dweb:/ipfs/QmZwSzs94V9u7VSdhw2bhbrogWZ37wvrQFBz6QNJTmKokE"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e","urls":["bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047","dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0x519e2c9d9c4dfd63311fb98663e55ba465772897cd4a98e3a5406a1f5959811f","urls":["bzz-raw://c4718d121f448f8fce3b28a276fd194014597319a4133696793893ae13c6e512","dweb:/ipfs/QmaQyHiKokgyWq9nREub6xGUAEYiGTiv4caigjGCiWZTjZ"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol","id":1675,"exportedSymbols":{"MessageHashUtils":[1674],"Strings":[1025]},"nodeType":"SourceUnit","src":"123:3634:15","nodes":[{"id":1602,"nodeType":"PragmaDirective","src":"123:24:15","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":1604,"nodeType":"ImportDirective","src":"149:39:15","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/Strings.sol","file":"../Strings.sol","nameLocation":"-1:-1:-1","scope":1675,"sourceUnit":1026,"symbolAliases":[{"foreign":{"id":1603,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"157:7:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":1674,"nodeType":"ContractDefinition","src":"521:3235:15","nodes":[{"id":1615,"nodeType":"FunctionDefinition","src":"1222:460:15","nodes":[],"body":{"id":1614,"nodeType":"Block","src":"1314:368:15","nodes":[],"statements":[{"AST":{"nativeSrc":"1376:300:15","nodeType":"YulBlock","src":"1376:300:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1397:4:15","nodeType":"YulLiteral","src":"1397:4:15","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"1403:34:15","nodeType":"YulLiteral","src":"1403:34:15","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"1390:6:15","nodeType":"YulIdentifier","src":"1390:6:15"},"nativeSrc":"1390:48:15","nodeType":"YulFunctionCall","src":"1390:48:15"},"nativeSrc":"1390:48:15","nodeType":"YulExpressionStatement","src":"1390:48:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1499:4:15","nodeType":"YulLiteral","src":"1499:4:15","type":"","value":"0x1c"},{"name":"messageHash","nativeSrc":"1505:11:15","nodeType":"YulIdentifier","src":"1505:11:15"}],"functionName":{"name":"mstore","nativeSrc":"1492:6:15","nodeType":"YulIdentifier","src":"1492:6:15"},"nativeSrc":"1492:25:15","nodeType":"YulFunctionCall","src":"1492:25:15"},"nativeSrc":"1492:25:15","nodeType":"YulExpressionStatement","src":"1492:25:15"},{"nativeSrc":"1571:31:15","nodeType":"YulAssignment","src":"1571:31:15","value":{"arguments":[{"kind":"number","nativeSrc":"1591:4:15","nodeType":"YulLiteral","src":"1591:4:15","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1597:4:15","nodeType":"YulLiteral","src":"1597:4:15","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"1581:9:15","nodeType":"YulIdentifier","src":"1581:9:15"},"nativeSrc":"1581:21:15","nodeType":"YulFunctionCall","src":"1581:21:15"},"variableNames":[{"name":"digest","nativeSrc":"1571:6:15","nodeType":"YulIdentifier","src":"1571:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1611,"isOffset":false,"isSlot":false,"src":"1571:6:15","valueSize":1},{"declaration":1608,"isOffset":false,"isSlot":false,"src":"1505:11:15","valueSize":1}],"id":1613,"nodeType":"InlineAssembly","src":"1367:309:15"}]},"documentation":{"id":1606,"nodeType":"StructuredDocumentation","src":"552:665:15","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1231:22:15","parameters":{"id":1609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1608,"mutability":"mutable","name":"messageHash","nameLocation":"1262:11:15","nodeType":"VariableDeclaration","scope":1615,"src":"1254:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1254:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1253:21:15"},"returnParameters":{"id":1612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1611,"mutability":"mutable","name":"digest","nameLocation":"1306:6:15","nodeType":"VariableDeclaration","scope":1615,"src":"1298:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1298:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1297:16:15"},"scope":1674,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":1641,"nodeType":"FunctionDefinition","src":"2148:229:15","nodes":[],"body":{"id":1640,"nodeType":"Block","src":"2234:143:15","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2286:32:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":1632,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"2343:7:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2351:6:15","memberName":"length","nodeType":"MemberAccess","src":"2343:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1630,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"2326:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1025_$","typeString":"type(library Strings)"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2334:8:15","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":838,"src":"2326:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2326:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2320:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1628,"name":"bytes","nodeType":"ElementaryTypeName","src":"2320:5:15","typeDescriptions":{}}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2320:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1636,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"2361:7:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2273:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1624,"name":"bytes","nodeType":"ElementaryTypeName","src":"2273:5:15","typeDescriptions":{}}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2279:6:15","memberName":"concat","nodeType":"MemberAccess","src":"2273:12:15","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2273:96:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1623,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2263:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:107:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1622,"id":1639,"nodeType":"Return","src":"2244:126:15"}]},"documentation":{"id":1616,"nodeType":"StructuredDocumentation","src":"1688:455:15","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2157:22:15","parameters":{"id":1619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1618,"mutability":"mutable","name":"message","nameLocation":"2193:7:15","nodeType":"VariableDeclaration","scope":1641,"src":"2180:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1617,"name":"bytes","nodeType":"ElementaryTypeName","src":"2180:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2179:22:15"},"returnParameters":{"id":1622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1641,"src":"2225:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:9:15"},"scope":1674,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":1661,"nodeType":"FunctionDefinition","src":"2720:191:15","nodes":[],"body":{"id":1660,"nodeType":"Block","src":"2831:80:15","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2875:10:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1655,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"2887:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1656,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"2898:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1652,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2858:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2862:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"2858:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2858:45:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1651,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2848:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2848:56:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1650,"id":1659,"nodeType":"Return","src":"2841:63:15"}]},"documentation":{"id":1642,"nodeType":"StructuredDocumentation","src":"2383:332:15","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2729:31:15","parameters":{"id":1647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"validator","nameLocation":"2769:9:15","nodeType":"VariableDeclaration","scope":1661,"src":"2761:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1643,"name":"address","nodeType":"ElementaryTypeName","src":"2761:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"data","nameLocation":"2793:4:15","nodeType":"VariableDeclaration","scope":1661,"src":"2780:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1645,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2760:38:15"},"returnParameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1661,"src":"2822:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1648,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2822:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2821:9:15"},"scope":1674,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":1673,"nodeType":"FunctionDefinition","src":"3353:401:15","nodes":[],"body":{"id":1672,"nodeType":"Block","src":"3462:292:15","nodes":[],"statements":[{"AST":{"nativeSrc":"3524:224:15","nodeType":"YulBlock","src":"3524:224:15","statements":[{"nativeSrc":"3538:22:15","nodeType":"YulVariableDeclaration","src":"3538:22:15","value":{"arguments":[{"kind":"number","nativeSrc":"3555:4:15","nodeType":"YulLiteral","src":"3555:4:15","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"3549:5:15","nodeType":"YulIdentifier","src":"3549:5:15"},"nativeSrc":"3549:11:15","nodeType":"YulFunctionCall","src":"3549:11:15"},"variables":[{"name":"ptr","nativeSrc":"3542:3:15","nodeType":"YulTypedName","src":"3542:3:15","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"3580:3:15","nodeType":"YulIdentifier","src":"3580:3:15"},{"hexValue":"1901","kind":"string","nativeSrc":"3585:10:15","nodeType":"YulLiteral","src":"3585:10:15","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"3573:6:15","nodeType":"YulIdentifier","src":"3573:6:15"},"nativeSrc":"3573:23:15","nodeType":"YulFunctionCall","src":"3573:23:15"},"nativeSrc":"3573:23:15","nodeType":"YulExpressionStatement","src":"3573:23:15"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3620:3:15","nodeType":"YulIdentifier","src":"3620:3:15"},{"kind":"number","nativeSrc":"3625:4:15","nodeType":"YulLiteral","src":"3625:4:15","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"3616:3:15","nodeType":"YulIdentifier","src":"3616:3:15"},"nativeSrc":"3616:14:15","nodeType":"YulFunctionCall","src":"3616:14:15"},{"name":"domainSeparator","nativeSrc":"3632:15:15","nodeType":"YulIdentifier","src":"3632:15:15"}],"functionName":{"name":"mstore","nativeSrc":"3609:6:15","nodeType":"YulIdentifier","src":"3609:6:15"},"nativeSrc":"3609:39:15","nodeType":"YulFunctionCall","src":"3609:39:15"},"nativeSrc":"3609:39:15","nodeType":"YulExpressionStatement","src":"3609:39:15"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3672:3:15","nodeType":"YulIdentifier","src":"3672:3:15"},{"kind":"number","nativeSrc":"3677:4:15","nodeType":"YulLiteral","src":"3677:4:15","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3668:3:15","nodeType":"YulIdentifier","src":"3668:3:15"},"nativeSrc":"3668:14:15","nodeType":"YulFunctionCall","src":"3668:14:15"},{"name":"structHash","nativeSrc":"3684:10:15","nodeType":"YulIdentifier","src":"3684:10:15"}],"functionName":{"name":"mstore","nativeSrc":"3661:6:15","nodeType":"YulIdentifier","src":"3661:6:15"},"nativeSrc":"3661:34:15","nodeType":"YulFunctionCall","src":"3661:34:15"},"nativeSrc":"3661:34:15","nodeType":"YulExpressionStatement","src":"3661:34:15"},{"nativeSrc":"3708:30:15","nodeType":"YulAssignment","src":"3708:30:15","value":{"arguments":[{"name":"ptr","nativeSrc":"3728:3:15","nodeType":"YulIdentifier","src":"3728:3:15"},{"kind":"number","nativeSrc":"3733:4:15","nodeType":"YulLiteral","src":"3733:4:15","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"3718:9:15","nodeType":"YulIdentifier","src":"3718:9:15"},"nativeSrc":"3718:20:15","nodeType":"YulFunctionCall","src":"3718:20:15"},"variableNames":[{"name":"digest","nativeSrc":"3708:6:15","nodeType":"YulIdentifier","src":"3708:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1669,"isOffset":false,"isSlot":false,"src":"3708:6:15","valueSize":1},{"declaration":1664,"isOffset":false,"isSlot":false,"src":"3632:15:15","valueSize":1},{"declaration":1666,"isOffset":false,"isSlot":false,"src":"3684:10:15","valueSize":1}],"id":1671,"nodeType":"InlineAssembly","src":"3515:233:15"}]},"documentation":{"id":1662,"nodeType":"StructuredDocumentation","src":"2917:431:15","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3362:15:15","parameters":{"id":1667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"domainSeparator","nameLocation":"3386:15:15","nodeType":"VariableDeclaration","scope":1673,"src":"3378:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1663,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3378:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1666,"mutability":"mutable","name":"structHash","nameLocation":"3411:10:15","nodeType":"VariableDeclaration","scope":1673,"src":"3403:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3403:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3377:45:15"},"returnParameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1669,"mutability":"mutable","name":"digest","nameLocation":"3454:6:15","nodeType":"VariableDeclaration","scope":1673,"src":"3446:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3446:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3445:16:15"},"scope":1674,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":1605,"nodeType":"StructuredDocumentation","src":"190:330:15","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"linearizedBaseContracts":[1674],"name":"MessageHashUtils","nameLocation":"529:16:15","scope":1675,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":15}