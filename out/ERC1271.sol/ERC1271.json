{"abi":[{"type":"function","name":"eip712Domain","inputs":[],"outputs":[{"name":"fields","type":"bytes1","internalType":"bytes1"},{"name":"name","type":"string","internalType":"string"},{"name":"version","type":"string","internalType":"string"},{"name":"chainId","type":"uint256","internalType":"uint256"},{"name":"verifyingContract","type":"address","internalType":"address"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"extensions","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"isValidSignature","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"result","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"},{"type":"function","name":"replaySafeHash","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"event","name":"EIP712DomainChanged","inputs":[],"anonymous":false},{"type":"error","name":"InvalidShortString","inputs":[]},{"type":"error","name":"StringTooLong","inputs":[{"name":"str","type":"string","internalType":"string"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"eip712Domain()":"84b0196e","isValidSignature(bytes32,bytes)":"1626ba7e","replaySafeHash(bytes32)":"ce1506be"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"result\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"replaySafeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Splits Based on coinbase (https://github.com/coinbase/smart-wallet/blob/main/src/ERC1271.sol)\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"replaySafeHash(bytes32)\":{\"details\":\"Returns an EIP-712-compliant hash of `hash`, where the domainSeparator includes address(this) and block.chainId to protect against the same signature being used for many accounts.\",\"returns\":{\"_0\":\"keccak256(\\\\x19\\\\x01 || this.domainSeparator ||      hashStruct(SplitWalletMessage({          hash: `hash`      }))  )\"}}},\"stateVariables\":{\"_MESSAGE_TYPEHASH\":{\"details\":\"We use `bytes32 hash` rather than `bytes message` In the EIP-712 context, `bytes message` would be useful for showing users a full message they are signing in some wallet preview. But in this case, to prevent replay across accounts, we are always dealing with nested messages, and so the input should be a EIP-191 or EIP-712 output hash. E.g. The input hash would be result of  keccak256(\\\"\\\\x19\\\\x01\\\" || someDomainSeparator || hashStruct(someStruct))  OR keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" || len(someMessage) || someMessage),\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Validates the signature with ERC1271 return, so that this account can also be used as a signer.\"}},\"notice\":\"ERC-1271 with guards for same signer being used on multiple splits\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/splits-contracts-monorepo/packages/splits-v2/src/utils/ERC1271.sol\":\"ERC1271\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solady/=lib/solady/src/\",\":solmate/=lib/solmate/src/\",\":splits-contracts-monorepo/=lib/splits-contracts-monorepo/src/\",\":splits-contracts/=lib/splits-contracts/contracts/\",\":splits-v2/=lib/splits-contracts-monorepo/packages/splits-v2/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0a7e89ffa57127a2e75931be926a11094b6ee2955632a5dce0228f3d8e98eb02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca02052cca6c00d760253f74519e6d7460dfaaf4efb3c004bf9c811ad7791d40\",\"dweb:/ipfs/QmSfzCXbsALfzo6Joqte5oyJxi7h27VqhDmcMJhmNGX2GJ\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"lib/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0x29074fe5a74bb024c57b3570abf6c74d8bceed3438694d470fd0166a3ecd196a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4f8435ccbc56e384f4cc9ac9ff491cf30a82f2beac00e33ccc2cf8af3f77cc3\",\"dweb:/ipfs/QmUKJXxTe6nn1qfgnX8xbnboNNAPUuEmJyGqMZCKNiFBgn\"]},\"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x70d9a9cf8d5cc830d7396505ef8eb9686bd0c60a29c6644bd6cc278f9bab8ebe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://719abb402c11be12355088da587ffd971fee1b035b5aa6b1ba3b1a9493d3c1d7\",\"dweb:/ipfs/QmanHMFVDqVtZAFFaH1CeGQWoHWsFnWHH75fCrguwi77Hq\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xa548dd62e9e17616ae80a1e7ac7b1447ae377efc27fb9f7b4f4fbf5c0b0a1dfb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d27e9ae3e67eb229444cd43d49db5be57c586155fd1d363b3b1f9bb1b7bb0087\",\"dweb:/ipfs/QmT2GFnpXsTWBs8bkeVJtQ4VNX7f3igxwB77JBCr4mDXb3\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0xa67f5e17d65eea22581382bd8c2804025f1029bfbd80908dc77b218fad29fb1d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db1206248cec67bdd40009d0b57e91a2ce62fd4a85eff8d3ea51b28b550afe88\",\"dweb:/ipfs/QmYcWcZ3XRPSx9r8cFwjokpESjjiCtkebVE4VK3FjE3GVd\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x3f1998a2904792ff2a576827876638b4917573186537f878d30b23277a3b8d38\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a8dfb08ed617c9d874de901e44ac8af7af7b13e7c84000a1da3cdaf6004593e8\",\"dweb:/ipfs/QmPX2hZAvCZJCQNSXcWqhxh3xp6UitwESrw3K2u3aYNqiu\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol\":{\"keccak256\":\"0x3583c2609d961607b0938ba8b19d8c348eea2bdfe79605d54b1a54b03564730d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://667624dfb350b124c1d2e77268e1e5bb97b1259a2e27c39f1a08530cd95cbc20\",\"dweb:/ipfs/QmNMLeuwnaX9cbty9zEHj5vKsJP5VFmBKibPKDqMJzkZsx\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x6fe40ce2addf1fe91a86c334b51ef5abe9c3b831d5d4d74ecae1d9c7d06cdccb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5027588e408027935ac78e32d9e813fda6bf33349b8a5be5c6c936273743369f\",\"dweb:/ipfs/QmZwSzs94V9u7VSdhw2bhbrogWZ37wvrQFBz6QNJTmKokE\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047\",\"dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x519e2c9d9c4dfd63311fb98663e55ba465772897cd4a98e3a5406a1f5959811f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c4718d121f448f8fce3b28a276fd194014597319a4133696793893ae13c6e512\",\"dweb:/ipfs/QmaQyHiKokgyWq9nREub6xGUAEYiGTiv4caigjGCiWZTjZ\"]},\"lib/splits-contracts-monorepo/packages/splits-v2/src/utils/ERC1271.sol\":{\"keccak256\":\"0x38c266e0d7c80e7c9d5f195da1099087e7cf407169ef28b85e29a192c8e8c0ca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec25d2b22a0558e37fc2b44bfc1544c0b1afd2f8c44b1134c847a74f1e8a9435\",\"dweb:/ipfs/QmZzFNwwa5m2HWZr6YH9g34PJy5dH9XL1GtnHnDE8AJfb4\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidShortString"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"type":"error","name":"StringTooLong"},{"inputs":[],"type":"event","name":"EIP712DomainChanged","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}]},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"view","type":"function","name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"result","type":"bytes4"}]},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"replaySafeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Initializes the {EIP712} domain separator."},"eip712Domain()":{"details":"See {IERC-5267}."},"replaySafeHash(bytes32)":{"details":"Returns an EIP-712-compliant hash of `hash`, where the domainSeparator includes address(this) and block.chainId to protect against the same signature being used for many accounts.","returns":{"_0":"keccak256(\\x19\\x01 || this.domainSeparator ||      hashStruct(SplitWalletMessage({          hash: `hash`      }))  )"}}},"version":1},"userdoc":{"kind":"user","methods":{"isValidSignature(bytes32,bytes)":{"notice":"Validates the signature with ERC1271 return, so that this account can also be used as a signer."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solady/=lib/solady/src/","solmate/=lib/solmate/src/","splits-contracts-monorepo/=lib/splits-contracts-monorepo/src/","splits-contracts/=lib/splits-contracts/contracts/","splits-v2/=lib/splits-contracts-monorepo/packages/splits-v2/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/splits-contracts-monorepo/packages/splits-v2/src/utils/ERC1271.sol":"ERC1271"},"evmVersion":"paris","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol":{"keccak256":"0x0a7e89ffa57127a2e75931be926a11094b6ee2955632a5dce0228f3d8e98eb02","urls":["bzz-raw://ca02052cca6c00d760253f74519e6d7460dfaaf4efb3c004bf9c811ad7791d40","dweb:/ipfs/QmSfzCXbsALfzo6Joqte5oyJxi7h27VqhDmcMJhmNGX2GJ"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol":{"keccak256":"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92","urls":["bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a","dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x29074fe5a74bb024c57b3570abf6c74d8bceed3438694d470fd0166a3ecd196a","urls":["bzz-raw://f4f8435ccbc56e384f4cc9ac9ff491cf30a82f2beac00e33ccc2cf8af3f77cc3","dweb:/ipfs/QmUKJXxTe6nn1qfgnX8xbnboNNAPUuEmJyGqMZCKNiFBgn"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol":{"keccak256":"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6","urls":["bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c","dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"keccak256":"0x70d9a9cf8d5cc830d7396505ef8eb9686bd0c60a29c6644bd6cc278f9bab8ebe","urls":["bzz-raw://719abb402c11be12355088da587ffd971fee1b035b5aa6b1ba3b1a9493d3c1d7","dweb:/ipfs/QmanHMFVDqVtZAFFaH1CeGQWoHWsFnWHH75fCrguwi77Hq"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792","urls":["bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453","dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0xa548dd62e9e17616ae80a1e7ac7b1447ae377efc27fb9f7b4f4fbf5c0b0a1dfb","urls":["bzz-raw://d27e9ae3e67eb229444cd43d49db5be57c586155fd1d363b3b1f9bb1b7bb0087","dweb:/ipfs/QmT2GFnpXsTWBs8bkeVJtQ4VNX7f3igxwB77JBCr4mDXb3"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol":{"keccak256":"0xa67f5e17d65eea22581382bd8c2804025f1029bfbd80908dc77b218fad29fb1d","urls":["bzz-raw://db1206248cec67bdd40009d0b57e91a2ce62fd4a85eff8d3ea51b28b550afe88","dweb:/ipfs/QmYcWcZ3XRPSx9r8cFwjokpESjjiCtkebVE4VK3FjE3GVd"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x3f1998a2904792ff2a576827876638b4917573186537f878d30b23277a3b8d38","urls":["bzz-raw://a8dfb08ed617c9d874de901e44ac8af7af7b13e7c84000a1da3cdaf6004593e8","dweb:/ipfs/QmPX2hZAvCZJCQNSXcWqhxh3xp6UitwESrw3K2u3aYNqiu"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":{"keccak256":"0x3583c2609d961607b0938ba8b19d8c348eea2bdfe79605d54b1a54b03564730d","urls":["bzz-raw://667624dfb350b124c1d2e77268e1e5bb97b1259a2e27c39f1a08530cd95cbc20","dweb:/ipfs/QmNMLeuwnaX9cbty9zEHj5vKsJP5VFmBKibPKDqMJzkZsx"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0x6fe40ce2addf1fe91a86c334b51ef5abe9c3b831d5d4d74ecae1d9c7d06cdccb","urls":["bzz-raw://5027588e408027935ac78e32d9e813fda6bf33349b8a5be5c6c936273743369f","dweb:/ipfs/QmZwSzs94V9u7VSdhw2bhbrogWZ37wvrQFBz6QNJTmKokE"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e","urls":["bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047","dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0x519e2c9d9c4dfd63311fb98663e55ba465772897cd4a98e3a5406a1f5959811f","urls":["bzz-raw://c4718d121f448f8fce3b28a276fd194014597319a4133696793893ae13c6e512","dweb:/ipfs/QmaQyHiKokgyWq9nREub6xGUAEYiGTiv4caigjGCiWZTjZ"],"license":"MIT"},"lib/splits-contracts-monorepo/packages/splits-v2/src/utils/ERC1271.sol":{"keccak256":"0x38c266e0d7c80e7c9d5f195da1099087e7cf407169ef28b85e29a192c8e8c0ca","urls":["bzz-raw://ec25d2b22a0558e37fc2b44bfc1544c0b1afd2f8c44b1134c847a74f1e8a9435","dweb:/ipfs/QmZzFNwwa5m2HWZr6YH9g34PJy5dH9XL1GtnHnDE8AJfb4"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/splits-contracts-monorepo/packages/splits-v2/src/utils/ERC1271.sol","id":13464,"exportedSymbols":{"EIP712":[1600],"ERC1271":[13463],"SignatureChecker":[1782]},"nodeType":"SourceUnit","src":"32:3256:44","nodes":[{"id":13385,"nodeType":"PragmaDirective","src":"32:24:44","nodes":[],"literals":["solidity","^","0.8",".23"]},{"id":13387,"nodeType":"ImportDirective","src":"58:79:44","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol","file":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","nameLocation":"-1:-1:-1","scope":13464,"sourceUnit":1601,"symbolAliases":[{"foreign":{"id":13386,"name":"EIP712","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"67:6:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":13389,"nodeType":"ImportDirective","src":"138:99:44","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol","file":"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol","nameLocation":"-1:-1:-1","scope":13464,"sourceUnit":1783,"symbolAliases":[{"foreign":{"id":13388,"name":"SignatureChecker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"147:16:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":13463,"nodeType":"ContractDefinition","src":"433:2854:44","nodes":[{"id":13398,"nodeType":"VariableDeclaration","src":"1368:90:44","nodes":[],"constant":true,"documentation":{"id":13393,"nodeType":"StructuredDocumentation","src":"730:633:44","text":" @dev We use `bytes32 hash` rather than `bytes message`\n In the EIP-712 context, `bytes message` would be useful for showing users a full message\n they are signing in some wallet preview. But in this case, to prevent replay\n across accounts, we are always dealing with nested messages, and so the\n input should be a EIP-191 or EIP-712 output hash.\n E.g. The input hash would be result of\n  keccak256(\"\\x19\\x01\" || someDomainSeparator || hashStruct(someStruct))\n  OR\n keccak256(\"\\x19Ethereum Signed Message:\\n\" || len(someMessage) || someMessage),"},"mutability":"constant","name":"_MESSAGE_TYPEHASH","nameLocation":"1393:17:44","scope":13463,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13394,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1368:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"53706c697457616c6c65744d6573736167652862797465733332206861736829","id":13396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1423:34:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_27494ec45ae688e7b2451f36d0c95ff88538e2aeba4442f5a7a84fb2268f9734","typeString":"literal_string \"SplitWalletMessage(bytes32 hash)\""},"value":"SplitWalletMessage(bytes32 hash)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_27494ec45ae688e7b2451f36d0c95ff88538e2aeba4442f5a7a84fb2268f9734","typeString":"literal_string \"SplitWalletMessage(bytes32 hash)\""}],"id":13395,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1413:9:44","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":13397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1413:45:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"id":13411,"nodeType":"FunctionDefinition","src":"1792:84:44","nodes":[],"body":{"id":13410,"nodeType":"Block","src":"1873:3:44","nodes":[],"statements":[]},"documentation":{"id":13399,"nodeType":"StructuredDocumentation","src":"1721:66:44","text":" @dev Initializes the {EIP712} domain separator."},"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":13406,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13401,"src":"1856:5:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":13407,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13403,"src":"1863:8:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":13408,"kind":"baseConstructorSpecifier","modifierName":{"id":13405,"name":"EIP712","nameLocations":["1849:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":1600,"src":"1849:6:44"},"nodeType":"ModifierInvocation","src":"1849:23:44"}],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":13404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13401,"mutability":"mutable","name":"_name","nameLocation":"1818:5:44","nodeType":"VariableDeclaration","scope":13411,"src":"1804:19:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":13400,"name":"string","nodeType":"ElementaryTypeName","src":"1804:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":13403,"mutability":"mutable","name":"_version","nameLocation":"1839:8:44","nodeType":"VariableDeclaration","scope":13411,"src":"1825:22:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":13402,"name":"string","nodeType":"ElementaryTypeName","src":"1825:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1803:45:44"},"returnParameters":{"id":13409,"nodeType":"ParameterList","parameters":[],"src":"1873:0:44"},"scope":13463,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":13437,"nodeType":"FunctionDefinition","src":"2265:352:44","nodes":[],"body":{"id":13436,"nodeType":"Block","src":"2375:242:44","nodes":[],"statements":[{"condition":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":13423,"name":"getSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13462,"src":"2426:9:44","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":13424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2426:11:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":13426,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13414,"src":"2454:4:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":13425,"name":"replaySafeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13456,"src":"2439:14:44","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":13427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:20:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":13428,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13416,"src":"2461:9:44","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":13421,"name":"SignatureChecker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"2389:16:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignatureChecker_$1782_$","typeString":"type(library SignatureChecker)"}},"id":13422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2406:19:44","memberName":"isValidSignatureNow","nodeType":"MemberAccess","referencedDeclaration":1729,"src":"2389:36:44","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,bytes32,bytes memory) view returns (bool)"}},"id":13429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2389:82:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":13433,"nodeType":"IfStatement","src":"2385:198:44","trueBody":{"id":13432,"nodeType":"Block","src":"2473:110:44","statements":[{"expression":{"hexValue":"30783136323662613765","id":13430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2562:10:44","typeDescriptions":{"typeIdentifier":"t_rational_371636862_by_1","typeString":"int_const 371636862"},"value":"0x1626ba7e"},"functionReturnParameters":13420,"id":13431,"nodeType":"Return","src":"2555:17:44"}]}},{"expression":{"hexValue":"30786666666666666666","id":13434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2600:10:44","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"functionReturnParameters":13420,"id":13435,"nodeType":"Return","src":"2593:17:44"}]},"documentation":{"id":13412,"nodeType":"StructuredDocumentation","src":"2138:122:44","text":" @notice Validates the signature with ERC1271 return, so that this account can also be used as a signer."},"functionSelector":"1626ba7e","implemented":true,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"2274:16:44","parameters":{"id":13417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13414,"mutability":"mutable","name":"hash","nameLocation":"2299:4:44","nodeType":"VariableDeclaration","scope":13437,"src":"2291:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2291:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":13416,"mutability":"mutable","name":"signature","nameLocation":"2320:9:44","nodeType":"VariableDeclaration","scope":13437,"src":"2305:24:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":13415,"name":"bytes","nodeType":"ElementaryTypeName","src":"2305:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2290:40:44"},"returnParameters":{"id":13420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13419,"mutability":"mutable","name":"result","nameLocation":"2367:6:44","nodeType":"VariableDeclaration","scope":13437,"src":"2360:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":13418,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2360:6:44","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2359:15:44"},"scope":13463,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":13456,"nodeType":"FunctionDefinition","src":"3013:164:44","nodes":[],"body":{"id":13455,"nodeType":"Block","src":"3089:88:44","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":13449,"name":"_MESSAGE_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13398,"src":"3144:17:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":13450,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13440,"src":"3163:4:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":13447,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3133:3:44","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":13448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3137:6:44","memberName":"encode","nodeType":"MemberAccess","src":"3133:10:44","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":13451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3133:35:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":13446,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3123:9:44","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":13452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3123:46:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":13445,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"3106:16:44","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":13453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3106:64:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":13444,"id":13454,"nodeType":"Return","src":"3099:71:44"}]},"documentation":{"id":13438,"nodeType":"StructuredDocumentation","src":"2623:385:44","text":" @dev Returns an EIP-712-compliant hash of `hash`,\n where the domainSeparator includes address(this) and block.chainId\n to protect against the same signature being used for many accounts.\n @return\n  keccak256(\\x19\\x01 || this.domainSeparator ||\n      hashStruct(SplitWalletMessage({\n          hash: `hash`\n      }))\n  )"},"functionSelector":"ce1506be","implemented":true,"kind":"function","modifiers":[],"name":"replaySafeHash","nameLocation":"3022:14:44","parameters":{"id":13441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13440,"mutability":"mutable","name":"hash","nameLocation":"3045:4:44","nodeType":"VariableDeclaration","scope":13456,"src":"3037:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3037:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3036:14:44"},"returnParameters":{"id":13444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":13456,"src":"3080:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":13442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3080:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3079:9:44"},"scope":13463,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":13462,"nodeType":"FunctionDefinition","src":"3224:61:44","nodes":[],"documentation":{"id":13457,"nodeType":"StructuredDocumentation","src":"3183:36:44","text":"@dev returns the ERC1271 signer."},"implemented":false,"kind":"function","modifiers":[],"name":"getSigner","nameLocation":"3233:9:44","parameters":{"id":13458,"nodeType":"ParameterList","parameters":[],"src":"3242:2:44"},"returnParameters":{"id":13461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":13462,"src":"3276:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13459,"name":"address","nodeType":"ElementaryTypeName","src":"3276:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3275:9:44"},"scope":13463,"stateMutability":"view","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[{"baseName":{"id":13391,"name":"EIP712","nameLocations":["462:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":1600,"src":"462:6:44"},"id":13392,"nodeType":"InheritanceSpecifier","src":"462:6:44"}],"canonicalName":"ERC1271","contractDependencies":[],"contractKind":"contract","documentation":{"id":13390,"nodeType":"StructuredDocumentation","src":"239:193:44","text":" @notice ERC-1271 with guards for same signer being used on multiple splits\n @author Splits\n Based on coinbase (https://github.com/coinbase/smart-wallet/blob/main/src/ERC1271.sol)"},"fullyImplemented":false,"linearizedBaseContracts":[13463,1600,145],"name":"ERC1271","nameLocation":"451:7:44","scope":13464,"usedErrors":[457,459],"usedEvents":[125]}],"license":"MIT"},"id":44}